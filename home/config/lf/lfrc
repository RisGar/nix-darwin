# vim:ft=conf

# options
set shell bash
set shellopts '-eu'
set ifs "\n"
set drawbox
set hidden true
set icons
set ignorecase true
set sixel true

map i $ mlpreview $f | $PAGER # don't use home-manager to use custom $PAGER
# set dirpreviews true

# layout
cmd recol ${{
    if [ $(tput cols) -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    else
        lf -remote "send $id set ratios 1:2:3"
    fi
}}
cmd toggle-preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

# symlinks
cmd symlink %{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    if [ "$#" -lt 1 ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    ln -s "$@"
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}
cmd follow-link %{{
  lf -remote "send ${id} select '$(readlink $f)'"
}}

# create dir or files
cmd mkdir %{{
  printf "dir name: "
  read ans
  mkdir -p $ans && lf -remote "send $id select $ans"
}}
cmd mkfile %{{
  echo "file name: "
  read ans
  mkdir -p "$(dirname "$ans")" && touch "$ans" && lf -remote "send $id select $ans"
}}

# trash
cmd trash %trash -F $fx

# zoxide
cmd z %{{
	result="$(zoxide query --exclude $PWD $@)"
	lf -remote "send $id cd $result"
}}
cmd zi ${{
	result="$(zoxide query -i)"
	lf -remote "send $id cd $result"
}}

# zoxide & starship
cmd on-cd &{{
    zoxide add "$PWD"
    export STARSHIP_SHELL=
    fmt="$(starship prompt)"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

# eza
cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza -ld --color=always "$f" | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}

# ripgrep
cmd rg_fzf ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

# fd
cmd fd_fzf ${{
  res="$(fd -d 1 . | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
  if [ -d "$res" ] ; then
    cmd="cd"
  elif [ -f "$res" ] ; then
    cmd="select"
  else
    exit 0
  fi
  lf -remote "send $id $cmd \"$res\""
}}

# open
cmd open %{{
  case $f in
  *.tar | *.tar.bz | *.tar.bz2 | *.tbz | *.tbz2 | *.tar.gz | *.tgz | *.tar.xz | *.txz | \
	  *.tar.zst | *.tzst | *.tar.lz | *.tlz | *.tar.lrz | *.zip | *.7z | *.rar)
	  tar -xf $f
	  ;;

  *) for f in $fx; do $OPENER $f >/dev/null 2>/dev/null & done ;;
  esac
}}

# copy path
cmd copy-path $printf '%s' "$fx" | pbcopy

# quit
cmd q quit

# chmod
cmd make-exec %chmod 755 $f && lf -remote "send $id reload"
cmd make-normal %chmod 644 $f && lf -remote "send $id reload"


# bind overrides
map d

# binds
map <enter> open
map R reload

map r rename
map <c-d> trash
map D delete
map af mkfile
map ad mkdir

map x cut
map y copy
map Y copy-path
map p paste
map P symlink

map f fd_fzf
map <c-f> rg_fzf

map zp toggle-preview

map <c-e> make-exec
map <c-n> make-normal

map <space> &qlmanage -p "$f" 2>/dev/null 1>/dev/null

# locations
map gh cd ~
map gc cd ~/.config

map gD cd ~/Downloads

map gd cd ~/Documents
map gp cd ~/Documents/Programming
map gb cd ~/Documents/Binaries

map gP cd ~/Pictures
map gm cd ~/Movies
map gM cd ~/Music

map gL follow-link

# start commands
recol

